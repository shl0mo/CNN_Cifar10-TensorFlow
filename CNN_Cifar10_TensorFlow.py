# -*- coding: utf-8 -*-
"""CNN_Cifar10-TensorFlow.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bnginwWF8FXQwEhCB_8TcqAOdwPA3g1e

# Import libraries
"""

from tensorflow import keras
from keras import layers
import matplotlib.pyplot as plt
import numpy as np
import cv2
from google.colab.patches import cv2_imshow

"""# Load database and split it into training set and test set"""

cifar10 = keras.datasets.cifar10

(train_images, train_labels), (test_images, test_labels) = cifar10.load_data()

"""# Normalize images"""

train_images, test_images = train_images/255.0, test_images/255.0

"""# Define classes names"""

class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']

"""# Show a resized image and its corresponding class name"""

def resize_img(img, scale):
  width = int(img.shape[1]*scale/100)
  height = int(img.shape[0]*scale/100)
  dim = (width, height)
  return cv2.resize(img, dim, interpolation = cv2.INTER_AREA)

def show_img(i, set_type, scale):
  if (set_type == 'train'):
    resized_50 = resize_img(train_images[i], scale)
    cv2_imshow(resized_50)
    class_name = class_names[train_labels[i][0]]
    print(class_name)
  elif (set_type == 'test'):
    resized_50 = resize_img(test_images[i], scale)
    cv2_imshow(resized_50)
    class_name = class_names[test_labels[i][0]]
    print(class_name)

show_img(777, 'train', 250)

"""# Build CNN"""

cnn = keras.models.Sequential()
cnn.add(layers.Conv2D(filters=32, kernel_size=3, activation='relu', input_shape=(32, 32, 3)))
cnn.add(layers.MaxPool2D((2,2)))

cnn.add(layers.Conv2D(filters=32, kernel_size=3, activation='relu'))
cnn.add(layers.MaxPool2D((2,2)))

cnn.add(layers.Flatten())
cnn.add(layers.Dense(units=64, activation='relu'))
cnn.add(layers.Dense(10))

"""# Compile CNN"""

loss = keras.losses.SparseCategoricalCrossentropy(from_logits=True)
learning_rate = 0.001
optmizer = keras.optimizers.Adam(learning_rate)
metrics = ['accuracy']

cnn.compile(optimizer=optmizer, loss=loss, metrics=metrics)

"""#  Train CNN"""

batch_size = 64
epochs = 10
cnn.fit(train_images, train_labels, epochs=epochs, verbose=2)

"""# Testing the CNN"""

test_index = 467

test_image = np.expand_dims(test_images[test_index], axis=0)
result = cnn.predict(test_image)
index = np.where(result[0] == np.max(result[0]))
print(class_names[index[0][0]])

(train_images, train_labels), (test_images, test_labels) = cifar10.load_data()

show_img(test_index, 'test', 250)